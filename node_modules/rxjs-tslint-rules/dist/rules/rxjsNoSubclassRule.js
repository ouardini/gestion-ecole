"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Lint = require("tslint");
var ts = require("typescript");
var tsquery_1 = require("@phenomnomnominal/tsquery");
var util_1 = require("../support/util");
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.applyWithProgram = function (sourceFile, program) {
        var _this = this;
        var failures = [];
        var typeChecker = program.getTypeChecker();
        var queryNames = [
            "AsyncSubject",
            "BehaviorSubject",
            "Observable",
            "ReplaySubject",
            "Scheduler",
            "Subject",
            "Subscriber"
        ];
        var couldBeNames = ["Observable", "Scheduler", "Subscriber"];
        var classDeclarations = tsquery_1.tsquery(sourceFile, "ClassDeclaration:has(HeritageClause ExpressionWithTypeArguments Identifier[name=/^(" + queryNames.join("|") + ")$/])");
        classDeclarations.forEach(function (node) {
            var classDeclaration = node;
            var heritageClauses = classDeclaration.heritageClauses;
            heritageClauses.forEach(function (heritageClause) {
                if (heritageClause.token === ts.SyntaxKind.ExtendsKeyword) {
                    heritageClause.types.forEach(function (heritageType) {
                        var type = typeChecker.getTypeAtLocation(heritageType);
                        if (couldBeNames.some(function (name) {
                            return util_1.couldBeType(type, name, {
                                name: /rxjs/,
                                typeChecker: typeChecker
                            });
                        })) {
                            failures.push(new Lint.RuleFailure(sourceFile, heritageType.getStart(), heritageType.getStart() + heritageType.getWidth(), Rule.FAILURE_STRING, _this.ruleName));
                        }
                    });
                }
            });
        });
        return failures;
    };
    Rule.metadata = {
        description: "Disallows subclassing RxJS classes.",
        options: null,
        optionsDescription: "Not configurable.",
        requiresTypeInfo: true,
        ruleName: "rxjs-no-subclass",
        type: "functionality",
        typescriptOnly: true
    };
    Rule.FAILURE_STRING = "Subclassing RxJS classes is forbidden";
    return Rule;
}(Lint.Rules.TypedRule));
exports.Rule = Rule;
