"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Lint = require("tslint");
var tsutils = require("tsutils");
var tsquery_1 = require("@phenomnomnominal/tsquery");
var util_1 = require("../support/util");
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.applyWithProgram = function (sourceFile, program) {
        var _this = this;
        var failures = [];
        var typeChecker = program.getTypeChecker();
        var subscribeQuery = "CallExpression > PropertyAccessExpression[name.name=\"subscribe\"]";
        var propertyAccessExpressions = tsquery_1.tsquery(sourceFile, subscribeQuery);
        propertyAccessExpressions.forEach(function (node) {
            var propertyAccessExpression = node;
            var callExpression = propertyAccessExpression.parent;
            if (tsutils.isCallExpression(callExpression)) {
                var type = typeChecker.getTypeAtLocation(propertyAccessExpression.expression);
                if (util_1.couldBeType(type, "Observable")) {
                    callExpression.arguments.forEach(function (arg) {
                        var innerPropertyAccessExpressions = tsquery_1.tsquery(arg, subscribeQuery);
                        innerPropertyAccessExpressions.forEach(function (node) {
                            var innerPropertyAccessExpression = node;
                            if (innerPropertyAccessExpression !== propertyAccessExpression) {
                                var type_1 = typeChecker.getTypeAtLocation(innerPropertyAccessExpression.expression);
                                if (util_1.couldBeType(type_1, "Observable")) {
                                    var name_1 = innerPropertyAccessExpression.name;
                                    failures.push(new Lint.RuleFailure(sourceFile, name_1.getStart(), name_1.getStart() + name_1.getWidth(), Rule.FAILURE_STRING, _this.ruleName));
                                }
                            }
                        });
                    });
                }
            }
        });
        return failures;
    };
    Rule.metadata = {
        description: "Disallows the calling of `subscribe` within a `subscribe` callback.",
        options: null,
        optionsDescription: "Not configurable.",
        requiresTypeInfo: true,
        ruleName: "rxjs-no-nested-subscribe",
        type: "style",
        typescriptOnly: true
    };
    Rule.FAILURE_STRING = "Nested subscribe calls are forbidden";
    return Rule;
}(Lint.Rules.TypedRule));
exports.Rule = Rule;
