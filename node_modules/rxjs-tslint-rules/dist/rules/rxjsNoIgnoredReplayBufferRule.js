"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tsquery_1 = require("@phenomnomnominal/tsquery");
var Lint = require("tslint");
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.applyWithProgram = function (sourceFile, program) {
        var _this = this;
        var failures = [];
        var newIdentifiers = tsquery_1.tsquery(sourceFile, "NewExpression > Identifier[name=\"ReplaySubject\"]");
        newIdentifiers.forEach(function (identifier) {
            var newExpression = identifier.parent;
            if (!newExpression.arguments || newExpression.arguments.length === 0) {
                failures.push(new Lint.RuleFailure(sourceFile, identifier.getStart(), identifier.getStart() + identifier.getWidth(), Rule.FAILURE_STRING, _this.ruleName));
            }
        });
        var nestedNewIdentitiers = tsquery_1.tsquery(sourceFile, "NewExpression PropertyAccessExpression Identifier[name=\"ReplaySubject\"]");
        nestedNewIdentitiers.forEach(function (identifier) {
            var newExpression = identifier.parent.parent;
            if (!newExpression.arguments || newExpression.arguments.length === 0) {
                failures.push(new Lint.RuleFailure(sourceFile, identifier.getStart(), identifier.getStart() + identifier.getWidth(), Rule.FAILURE_STRING, _this.ruleName));
            }
        });
        var callIdentifiers = tsquery_1.tsquery(sourceFile, "CallExpression Identifier[name=/(publishReplay|shareReplay)/]");
        callIdentifiers.forEach(function (identifier) {
            var callExpression = identifier.parent;
            if (callExpression.arguments.length === 0) {
                failures.push(new Lint.RuleFailure(sourceFile, identifier.getStart(), identifier.getStart() + identifier.getWidth(), Rule.FAILURE_STRING, _this.ruleName));
            }
        });
        return failures;
    };
    Rule.metadata = {
        description: "Disallows using `ReplaySubject`, `publishReplay` or `shareReplay` without specifying the buffer size.",
        options: null,
        optionsDescription: "Not configurable.",
        requiresTypeInfo: true,
        ruleName: "rxjs-no-ignored-replay-buffer",
        type: "functionality",
        typescriptOnly: true
    };
    Rule.FAILURE_STRING = "Ignoring the buffer size is forbidden";
    return Rule;
}(Lint.Rules.TypedRule));
exports.Rule = Rule;
