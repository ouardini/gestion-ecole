import * as ts from "typescript";
export declare function couldBeFunction(type: ts.Type): boolean;
export declare function couldBeType(type: ts.Type, name: string | RegExp, qualified?: {
    name: RegExp;
    typeChecker: ts.TypeChecker;
}): boolean;
export declare function findDeclaration(node: ts.Node, typeChecker: ts.TypeChecker): ts.Declaration | undefined;
export declare function isAny(type: ts.Type): boolean;
export declare function isConstDeclaration(declaration: ts.Declaration): boolean;
export declare function isInstanceofCtor(node: ts.Node): boolean;
export declare function isIntersectionType(type: ts.Type): type is ts.UnionType;
export declare function isReferenceType(type: ts.Type): type is ts.TypeReference;
export declare function isThis(node: ts.Node): boolean;
export declare function isType(type: ts.Type, name: string | RegExp, qualified?: {
    name: RegExp;
    typeChecker: ts.TypeChecker;
}): boolean;
export declare function isUnionType(type: ts.Type): type is ts.UnionType;
export declare function isWithinCallExpressionExpression(node: ts.Node): boolean;
export declare function isWithinParameterDeclaration(node: ts.Node): boolean;
