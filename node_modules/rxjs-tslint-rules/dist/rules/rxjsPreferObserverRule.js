"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Lint = require("tslint");
var tsutils = require("tsutils");
var peer = require("../support/peer");
var tsquery_1 = require("@phenomnomnominal/tsquery");
var util_1 = require("../support/util");
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.applyWithProgram = function (sourceFile, program) {
        var _this = this;
        var failures = [];
        var typeChecker = program.getTypeChecker();
        var propertyAccessExpressions = tsquery_1.tsquery(sourceFile, "CallExpression PropertyAccessExpression[name.name=/^(pipe|subscribe)$/]");
        propertyAccessExpressions.forEach(function (node) {
            var propertyAccessExpression = node;
            var callExpression = propertyAccessExpression.parent;
            if (tsutils.isCallExpression(callExpression)) {
                var type = typeChecker.getTypeAtLocation(propertyAccessExpression.expression);
                if (util_1.couldBeType(type, "Observable")) {
                    var name_1 = propertyAccessExpression.name.getText();
                    switch (name_1) {
                        case "pipe":
                            failures.push.apply(failures, _this.validatePipe(sourceFile, typeChecker, callExpression));
                            break;
                        case "subscribe":
                            failures.push.apply(failures, _this.validateArgs(sourceFile, typeChecker, callExpression));
                            break;
                        default:
                            throw new Error("Unexpected property '" + name_1 + "'");
                    }
                }
            }
        });
        return failures;
    };
    Rule.prototype.validateArgs = function (sourceFile, typeChecker, callExpression) {
        var _this = this;
        var failures = [];
        var args = callExpression.arguments;
        var options = this.getOptions().ruleArguments[0];
        var allowNext = options && options.hasOwnProperty("allowNext") ? options.allowNext : true;
        if (args.length > 1) {
            args.forEach(function (arg) {
                failures.push(new Lint.RuleFailure(sourceFile, arg.getStart(), arg.getStart() + arg.getWidth(), Rule.FAILURE_STRING, _this.ruleName));
            });
        }
        else if (args.length === 1 && !allowNext) {
            var arg = args[0];
            var type = typeChecker.getTypeAtLocation(arg);
            if (tsutils.isFunctionExpression(arg) ||
                tsutils.isArrowFunction(arg) ||
                util_1.couldBeFunction(type)) {
                failures.push(new Lint.RuleFailure(sourceFile, arg.getStart(), arg.getStart() + arg.getWidth(), Rule.FAILURE_STRING, this.ruleName));
            }
        }
        return failures;
    };
    Rule.prototype.validatePipe = function (sourceFile, typeChecker, callExpression) {
        var _this = this;
        var failures = [];
        var tapIdentifiers = tsquery_1.tsquery(callExpression, "CallExpression Identifier[name=\"tap\"]");
        tapIdentifiers.forEach(function (tapIdentifier) {
            var callExpression = tapIdentifier.parent;
            if (tsutils.isCallExpression(callExpression)) {
                failures.push.apply(failures, _this.validateArgs(sourceFile, typeChecker, callExpression));
            }
        });
        return failures;
    };
    Rule.metadata = {
        deprecationMessage: peer.v5 || peer.compat ? "Rule is v6-only." : undefined,
        description: "Enforces the passing of observers to `subscribe` and `tap`.",
        options: {
            properties: {
                allowNext: { type: "boolean" }
            },
            type: "object"
        },
        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["\n            An optional object with optional `allowNext` property - which defaults to `true`."], ["\n            An optional object with optional \\`allowNext\\` property - which defaults to \\`true\\`."]))),
        requiresTypeInfo: true,
        ruleName: "rxjs-prefer-observer",
        type: "style",
        typescriptOnly: true
    };
    Rule.FAILURE_STRING = "Prefer an observer over callbacks";
    return Rule;
}(Lint.Rules.TypedRule));
exports.Rule = Rule;
var templateObject_1;
