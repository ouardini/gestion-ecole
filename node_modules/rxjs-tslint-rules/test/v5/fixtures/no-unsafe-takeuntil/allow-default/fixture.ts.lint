import { Observable } from "rxjs/Observable";
import { of } from "rxjs/observable/of";
import { finalize, publish, publishBehavior, publishLast, publishReplay, share, shareReplay, takeUntil } from "rxjs/operators";

import "rxjs/add/operator/finally";
import "rxjs/add/operator/publish";
import "rxjs/add/operator/publishBehavior";
import "rxjs/add/operator/publishLast";
import "rxjs/add/operator/publishReplay";
import "rxjs/add/operator/share";
import "rxjs/add/operator/shareReplay";
import "rxjs/add/operator/takeUntil";

const a = of("a");
const b = of("b");
const c = of("c");
const d = of("d");

const e = a.takeUntil(d).publish().subscribe();
const f = a.takeUntil(d).publishBehavior("x").subscribe();
const g = a.takeUntil(d).publishLast().subscribe();
const h = a.takeUntil(d).publishReplay(1).subscribe();
const i = a.takeUntil(d).share().subscribe();
const j = a.takeUntil(d).shareReplay(1).subscribe();

const k = a.takeUntil(d).pipe(publish()).subscribe();
const l = a.takeUntil(d).pipe(publishBehavior("x")).subscribe();
const m = a.takeUntil(d).pipe(publishLast()).subscribe();
const n = a.takeUntil(d).pipe(publishReplay(1)).subscribe();
const o = a.takeUntil(d).pipe(share()).subscribe();
const p = a.takeUntil(d).pipe(shareReplay(1)).subscribe();

const q = a.pipe(takeUntil(d), publish()).subscribe();
const r = a.pipe(takeUntil(d), publishBehavior("x")).subscribe();
const s = a.pipe(takeUntil(d), publishLast()).subscribe();
const t = a.pipe(takeUntil(d), publishReplay(1)).subscribe();
const u = a.pipe(takeUntil(d), share()).subscribe();
const v = a.pipe(takeUntil(d), shareReplay(1)).subscribe();

const w = a.takeUntil(d).finally(() => {}).subscribe();
const x = a.takeUntil(d).pipe(finalize(() => {})).subscribe();
const y = a.pipe(takeUntil(d), finalize(() => {})).subscribe();

[no-unsafe-takeuntil]: Applying operators after takeUntil is forbidden
