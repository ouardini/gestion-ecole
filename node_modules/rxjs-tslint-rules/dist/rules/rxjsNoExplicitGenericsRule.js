"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Lint = require("tslint");
var tsquery_1 = require("@phenomnomnominal/tsquery");
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        var _this = this;
        var identifiers = [];
        identifiers.push.apply(identifiers, tsquery_1.tsquery(sourceFile, "CallExpression[expression.name.text=\"pipe\"] > CallExpression[typeArguments.length>0] > Identifier"));
        identifiers.push.apply(identifiers, tsquery_1.tsquery(sourceFile, "CallExpression[typeArguments.length>0] > Identifier[name=/^(from|of)$/]"));
        identifiers.push.apply(identifiers, tsquery_1.tsquery(sourceFile, "NewExpression[typeArguments.length > 0] > Identifier[name=\"BehaviorSubject\"]"));
        return identifiers.map(function (identifier) {
            return new Lint.RuleFailure(sourceFile, identifier.getStart(), identifier.getStart() + identifier.getWidth(), Rule.FAILURE_STRING, _this.ruleName);
        });
    };
    Rule.metadata = {
        description: "Disallows explicit generic type arguments.",
        options: null,
        optionsDescription: "Not configurable.",
        requiresTypeInfo: false,
        ruleName: "rxjs-no-explicit-generics",
        type: "functionality",
        typescriptOnly: true
    };
    Rule.FAILURE_STRING = "Explicit generic type arguments are forbidden";
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
